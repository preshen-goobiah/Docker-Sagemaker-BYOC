#!/usr/bin/env python
from __future__ import print_function

import numpy as np
import pandas as pd 
import os 
from sklearn.linear_model import LinearRegression
from sklearn.model_selection  import train_test_split
import json
import pickle
import sys
import traceback


#Whats in here? 
prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')

channel_name='training'
training_path = os.path.join(input_path, channel_name)

def train():
    print('Starting the training.')
    try:

        input_files = [os.path.join(training_path, file) for file in os.listdir(training_path)]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [pd.read_csv(file, header=None) for file in input_files ]
        #Concat all training files? 
        train_data = pd.concat(raw_data)

        reg = LinearRegression()
        #Label needs to be in first col
        y_train = train_data.iloc[:,0:1]
        #Rest are features 
        x_train = train_data.iloc[0:,1:]
        #Split into trainign & testing
        reg.fit(x_train,y_train)
          # save the model
        with open(os.path.join(model_path, 'linear-regression-model.pkl'), 'w') as out:
            pickle.dump(reg, out)
        print('Training complete.')

    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file==sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()
    # A zero exit code causes the job to be marked a Succeeded.
sys.exit(0)
    
